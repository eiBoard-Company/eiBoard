Summary of our technical review



# Technical Review Memo of Team eiBoard
## Date 
16.15-
## Participants 
Developers Frontend: Eileen, Niklas
Developers Backend: Matteo, Julian
Projectmanagement: Marius


## Goal/Focus
**Eileen**
Eileen was giving us a review about the main screen and where you will find yourself after logging in.
Unsecurities about the style/design of the menue.
Question rose if it should be in the style of three dots aka burger menu and if it should be closed via an "arrow back" icon.
And hoew it usually is - everyone has a different taste. We could not disagree which looks better but surely disagreede that both ways a just fine.
Sometimes the flow between the popping up of the new menu was with a slow working animation whcih looked like a bug.

Another point was the navigation while creating a new task. The menu here must be closed via swiping like in an app.
This should get changed so it can get clsed via the burger menu.

Another point to consider was the initializing of a keyword. Due to security reasons it should get tipied in two times 
and get compared to make sure that a writing mistake will not likely to appear while setting a new password.

Reviewed it to get an honest opinion about the design of the menu.


**Niklas**
Niklas was giving a us a review about the list that will get filled up with data from the backend and will give back a tasklist object.
The list serves the data communication between frontend and backend.
It is possibly to use filters for the list such as a filter for the dates. 
The Backend needs a function to filter the list for the actual date, which tasks should have been solved already and which tasks should get 
done until today / until the end of the current week
// The files: task_list_object.dart, backend_rapla.dart
Styleattributes are taken care of.
Data taken care of (list attributes-> cannot put a number instead string)

Reviewed it to explain the adaptive list to the backend team.



**Julian**
Julian was giving a us a review about the backend unit tests and about jenkins pipelines.

1. Topic: Unit tests backend
The most unit test are written for the services. Because data flow and methods to perform actions on the Database are defined in the services.
The entry service consists of four methods: save, delete, findbyID and getAllEntries.
Julian was working with mockup repositories because it made writing the unit tests easier.
Method save: a new entry gets made -> the mockup repository checks the return of the entry and if the are the same on both.
Method delete: entryID gets deleted and the deletion gets confirmed.
Method findByID: checks if the found entry is the same as the one that got created. If this is not the case: An exception gets thrown. 
Method getAllEntries: creating a list via new entry. Getting back the list via getAllEntries.
The list of all entries is getting compared if it is the same one as the recieved entry list. Therefore the length of the lists and the first entry of the lists are getting compared
Comparing the first entry avoids the probable case that the lists are not the same but of same size. It makes the unit test getting more refined.

Other services covered by unit tests:
getDay - getDay is a hashmap. list and date in hashmap are to be passed.
Then it is checked whether the services that are fetched match the appointments.
The same can be done for the whole week. Also check if appointments match.

newUser: list of persons gets increased by one. Outside of the method is a list with two "already existing" persons. 
A new person gets added and it gets checked with the method getAllUsers if the list increased by one.

deleteById checks if a list of six people is reduced by one when a user is deleted.
Furthermore it gets tested if an exception gets thrown if the ID of the deleted user gets called.

Some more unit tests for the getter and setter methods have to be written. For now some vulnerable methods have been covered with the unit tests.

Reviewed it to explain the unit tests to the team and how they work.


2. Jenkins pipelines
Julian explained tio us some solutions about the jenkins pipeline we have tried to find for a few weeks now.

If maven is used, the maven plugin must be installed such as maven integration and pipeline maven plugin.
Furthermore it is needed to indicate all the dependencies at "konifg" -> "Hilfsprograsmme".
Often if the plugin gets installed directly from page the version gets selected and the abbreviation gets set of how to access it.
Another point to consider is that maven has to be installed in the jenkins image. Therefore use the command **docker exec -u** - to define the user that is going to 
"work in the container". 0 is admin.
If else you will not be able to go out of the container without destroying it.
Also do not forget to call the right ID. 
Via **apt -get install maven** maven will get installed in the container.
Now the jenkins pipeline is set up with mven.

For the future: If the tests were successful, a new docker image should be created and pushed to the git registry. 
The old container should get deleted and the new container should start. This way updates for the Application happen pretty smoothly.

Reviewed it to explain the bugfix for our jenkins pipeline.


**Matteo** 
Matteo was giving a us a review about controllers and about swagger.
The controller serves as an interface. The data is displayed.
If you pass the lecture of a day, you get back the lectures of this day along additional information such as the lecturer, the rooms etc.
You can use this information to filter the data.
The interface is working with different response codes just as 200 - OK - returns lectures of the given day.
406 - wrong date, format etc.

Support is secured via keycloak. But so far, everyone can still access the endpoints.
This should get changed in the near future.
It is also planned to write some more controllers. For example a controller just in case you want to get back the data of a whole week.
Some bugs have to be fixed. For example days are not returned as individual objects but are still related to each other.
It might be interesting for the frontend-team, that swagger you can see what the returned data object looks like. e.g. lectureList
The entry controller: will be deleted
User controller: endpoints: get list of all users, delete / insert user, show user by id etc.

Reviewed it to explain how the controllers are working.


## Components for Review

**Eileen**
page.dart
main page
menu


**Niklas**
todo_list_screeen.dart
task_list_object.dart
backend_rapla.dart

**Julian**
unit tests for backend
jenkins
docker
jenkinsfile
unit test methods:
save
delete
findbyID
getAllEntries
getDay
newUser
getAllUsers
deleteByID


**Matteo** 
DateController.java
Person.java


## Criteria of review 
**Eileen**
code quality, performance, security, design


**Niklas**
code quality, performance, data communication


**Julian**
unit tests, security, performance


**Matteo** 
percormance, data communication



## Review methodology

**Eileen**
Showing live demo.
Running through code

**Niklas**
Showing live demo.
Running through code

**Julian**
Showing live demo.
Running through code
describing how to go into docker.

**Matteo** 
Showing live demo.
Running through code




## Outcome from the meeting

From the meeting we learned that it is much easier to work on unit tests when they are done with mockup data.
The code we write is of a good clarity and clearness.
Especially the variable names are well chosen and meaningful.
A few "help comments" still need to be deleted.
A few small details in the design may need to be changed.

The teams have agreed on how to proceed. This is especially important, since the backend is now to be interlocked with the frontend.

There is still the problem that the frontend can not yet access the backend.
Various cors policy guidelines still need to be worked on to enable access to the backend.

Each input tag must still be provided with a user ID.

Furthermore the data should be connected to mysql via keycloak to secure the data.
The frontend will have to authenticate the user with keycloak.
